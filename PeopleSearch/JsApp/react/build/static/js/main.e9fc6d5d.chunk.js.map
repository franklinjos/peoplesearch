{"version":3,"sources":["styles/global.js","themes/color-palette.js","common/utils.js","common/data-service.js","components/person.js","styles/media.js","components/people.js","components/add-person.js","components/search.js","components/form-text.js","app.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","styledNormalize","colorPalette","alto","white","black10","black14","black12","black20","bluish","silver","mineshaft","wildsand","Object","freeze","formatData","data","format","today","Date","date","isNaN","Intl","DateTimeFormat","age","getFullYear","m","getMonth","getDate","concat","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","personModel","FirstName","LastName","MiddleName","DateOfBirth","Picture","Interests","Address","AddressLine1","AddressLine2","City","State","ZipCode","Country","requiredPersonKeys","requiredAddressKeys","_callee","input","url","regenerator_default","a","wrap","_context","prev","next","window","location","origin","trim","axios","get","abrupt","sent","stop","addPerson","_x2","_addPerson","apply","this","arguments","_callee2","person","_context2","post","deletePerson","_x3","_deletePerson","_callee3","id","_context3","delete","StyledCard","styled","Card","person_templateObject","StyledTag","Tag","_templateObject2","StyledText","Text","_templateObject3","Image","img","_templateObject4","div","_templateObject5","DelButton","Button","_templateObject6","Person","props","formattedName","interests","JSON","parse","imgSrc","skeletonLoad","isLoading","formattedDobAge","react_default","createElement","elevation","Elevation","TWO","src","width","alt","className","map","interest","index","key","PersonId","round","large","minimal","icon","onClick","asyncToGenerator","mark","onDelete","sizes","xsmall","small","medium","media","keys","reduce","acc","label","css","media_templateObject","CardsContainer","people_templateObject","people_templateObject2","people_templateObject3","people_templateObject4","StyledEmptyOrErrorCard","people_templateObject5","People","isError","people","length","Container","add_person_templateObject","jsDateFormatter","formatDate","toLocaleDateString","parseDate","str","placeholder","AddPerson","_useState","useState","_useState2","slicedToArray","isOpen","setIsOpen","_useState3","_useState4","isValidInput","setIsValidInput","_useState5","_useState6","fileInput","setFileInput","_useState7","_useState8","isSaving","setIsSaving","_useState9","stringify","_useState10","setPerson","updatePersonValue","val","newPerson","assign","validate","updateAddressValue","count","forEach","buttons","dialog","onClose","title","Classes","DIALOG_BODY","FormText","placeHolder","isRequired","maxLength","onVlaueChanged","formGroup","helperText","labelFor","labelInfo","dateInput","maxDate","required","onChange","newDate","toISOString","split","parsed","parseInt","forms_fileInput","disabled","text","onInputChange","_ref2","_ref","files","base64","target","size","type","name","substring","indexOf","t0","console","_x","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","intent","Intent","PRIMARY","onAdd","loading","Search","debouncedSearch","debounce","onSearch","event","value","requiredLabel","inputGroup","AppContainer","app_templateObject","Header","header","app_templateObject2","SearchAddContainer","app_templateObject3","App","toConsumableArray","skeleton","setPeople","setIsLoading","setIsError","getData","_search","search","then","response","catch","err","useEffect","Fragment","searchInput","setTimeout","Boolean","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9fc6d5d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport styledNormalize from \"styled-normalize\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css?family=Lato');\r\n    ${styledNormalize}\r\n    :root{\r\n        font-size: 16px;\r\n        font-family: Lato;\r\n    }\r\n\r\n`;\r\n","const colorPalette = {\r\n    alto: \"#CFCFCF\",\r\n    white: \"#ffffff\",\r\n    black10: \"rgba(0, 0, 0, 0.1)\",\r\n    black14: \"rgba(0, 0, 0, 0.14)\",\r\n    black12: \"rgba(0, 0, 0, 0.12)\",\r\n    black20: \"rgba(0, 0, 0, 0.2)\",\r\n    bluish: \"#2892bd\",\r\n    silver: \"#868686\",\r\n    mineshaft: \"#3D3D3D\",\r\n    wildsand: \"#f5f5f5\"\r\n};\r\n\r\nObject.freeze(colorPalette);\r\nexport { colorPalette };\r\n","/**\r\n * Format 'data' in specified 'format'\r\n * @param {string} data\r\n * @param {string}  format\r\n * return {string} format applied data\r\n */\r\nexport function formatData(data, format) {\r\n    var today = new Date();\r\n    const date = new Date(data);\r\n    switch (format) {\r\n        case \"date\":\r\n            if (date instanceof Date && !isNaN(date)) data = Intl.DateTimeFormat().format(date);\r\n            break;\r\n        case \"age\":\r\n            var age = today.getFullYear() - date.getFullYear();\r\n            var m = today.getMonth() - date.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < date.getDate())) {\r\n                age--;\r\n            }\r\n            data = `${age} y`;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function toBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nexport const personModel = {\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    MiddleName: \"\",\r\n    DateOfBirth: \"\",\r\n    Picture: \"\",\r\n    Interests: \"\",\r\n    Address: {\r\n        AddressLine1: \"\",\r\n        AddressLine2: \"\",\r\n        City: \"\",\r\n        State: \"\",\r\n        ZipCode: \"\",\r\n        Country: \"\"\r\n    }\r\n};\r\n\r\nexport const requiredPersonKeys = [\"FirstName\", \"LastName\", \"DateOfBirth\", \"Picture\"];\r\nexport const requiredAddressKeys = [\"AddressLine1\", \"City\", \"State\", \"ZipCode\", \"Country\"];\r\n","import axios from \"axios\";\r\n\r\nexport async function search(input) {\r\n    let url = window.location.origin + \"/api/people/\";\r\n    if (input && input.trim()) {\r\n        url += \"search/\" + input;\r\n    }\r\n    return await axios.get(url);\r\n}\r\n\r\nexport async function addPerson(person) {\r\n    let url = window.location.origin + \"/api/people/\";\r\n    return await axios.post(url, person);\r\n}\r\n\r\nexport async function deletePerson(id) {\r\n    let url = window.location.origin + \"/api/people/\"+ id;\r\n    return await axios.delete(url);\r\n}\r\n","/**\r\n * @module Person\r\n * @description Component to show person's profile as card\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tag, Text, Card, Elevation, Button } from \"@blueprintjs/core\";\r\n\r\n/** Internal */\r\nimport { formatData } from \"../common/utils\";\r\nimport { deletePerson } from \"../common/data-service\";\r\n\r\nconst StyledCard = styled(Card)`\r\n    display: grid;\r\n    grid-template-columns: [image]auto [details]1fr [del]auto;\r\n    grid-template-rows: 1fr auto;\r\n    justify-content: left;\r\n    align-content: center;\r\n    grid-gap: 10px;\r\n    min-width: 300px;\r\n`;\r\n\r\nconst StyledTag = styled(Tag)`\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n    padding: 2px;\r\n`;\r\n\r\nconst StyledText = styled(Text)`\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    min-width: 100px;\r\n`;\r\n\r\nconst Interests = styled.div`\r\n    grid-column: 1/3;\r\n`;\r\n\r\nconst DelButton = styled(Button)`\r\n    justify-self: right;\r\n    grid-column: 4/-1;\r\n`;\r\n\r\nPerson.propTypes = {\r\n    person: PropTypes.shape({\r\n        PersonId: PropTypes.number.isRequired,\r\n        FirstName: PropTypes.string.isRequired,\r\n        LastName: PropTypes.string.isRequired,\r\n        MiddleName: PropTypes.string,\r\n        DateOfBirth: PropTypes.string,\r\n        Picture: PropTypes.any,\r\n        Interests: PropTypes.string,\r\n        Address: PropTypes.shape({\r\n            PersonAddressId: PropTypes.number.isRequired,\r\n            AddressLine1: PropTypes.string.isRequired,\r\n            AddressLine2: PropTypes.string,\r\n            City: PropTypes.string.isRequired,\r\n            State: PropTypes.string.isRequired,\r\n            ZipCode: PropTypes.string.isRequired,\r\n            Country: PropTypes.string.isRequired\r\n        })\r\n    }),\r\n    isLoading: PropTypes.bool,\r\n    onDelete: PropTypes.func\r\n};\r\nexport function Person(props) {\r\n    const formattedName = props.person.LastName + \", \" + props.person.FirstName;\r\n    const interests = props.person.Interests ? JSON.parse(props.person.Interests) : [];\r\n    const imgSrc = \"data:image/jpeg;base64,\" + props.person.Picture;\r\n    const skeletonLoad = props.isLoading ? \"bp3-skeleton\" : \"\";\r\n    const formattedDobAge =\r\n        formatData(props.person.DateOfBirth, \"date\") + \" (\" + formatData(props.person.DateOfBirth, \"age\") + \")\";\r\n\r\n    return (\r\n        <StyledCard elevation={Elevation.TWO}>\r\n            {!props.isLoading && <Image src={imgSrc} width=\"150px\" alt=\"\"></Image>}\r\n            {props.isLoading && <Image className={skeletonLoad} src=\"\" width=\"150px\" alt=\"\"></Image>}\r\n            <div>\r\n                <StyledText className={skeletonLoad}>{formattedName}</StyledText>\r\n                <StyledText className={skeletonLoad}>{formattedDobAge}</StyledText>\r\n                <StyledText className={skeletonLoad}>{props.person.Address.AddressLine1}</StyledText>\r\n                <StyledText className={skeletonLoad}>\r\n                    {props.person.Address.City +\r\n                        \", \" +\r\n                        props.person.Address.State +\r\n                        \", \" +\r\n                        props.person.Address.ZipCode}\r\n                </StyledText>\r\n                <StyledText className={skeletonLoad}>{props.person.Address.Country}</StyledText>\r\n            </div>\r\n\r\n            <Interests>\r\n                {interests.map((interest, index) => (\r\n                    <StyledTag className={skeletonLoad} key={props.person.PersonId + index} round={true} large={false}>\r\n                        {interest}\r\n                    </StyledTag>\r\n                ))}\r\n            </Interests>\r\n            <DelButton\r\n                minimal={true}\r\n                icon=\"delete\"\r\n                onClick={async () => {\r\n                    await deletePerson(props.person.PersonId);\r\n                    props.onDelete();\r\n                }}\r\n            ></DelButton>\r\n        </StyledCard>\r\n    );\r\n}\r\n","import { css } from \"styled-components\";\r\nconst sizes = {\r\n    xsmall: 360,\r\n    small: 768,\r\n    medium: 992,\r\n    large: 1440\r\n};\r\n\r\n// Iterate through the sizes and create a media template\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n    acc[label] = (...args) => css`\r\n        @media (min-width: ${sizes[label] / 16}em) {\r\n            ${css(...args)}\r\n        }\r\n    `;\r\n\r\n    return acc;\r\n}, {});\r\n\r\nexport { media };\r\n","/**\r\n * @module People\r\n * @description Component to show collection of Person profile cards\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Elevation } from \"@blueprintjs/core\";\r\n\r\n/** Internal */\r\nimport { Person } from \"./\";\r\nimport { media } from \"../styles/media\";\r\n\r\nconst CardsContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(1, 1fr);\r\n    grid-gap: 20px;\r\n    /* Adjust cards in one row based on screen break point. Defaulted to xsmal */\r\n    ${media.small`grid-template-columns: repeat(2, 1fr);`}\r\n    ${media.medium`grid-template-columns: repeat(3, 1fr);`}\r\n    ${media.large`grid-template-columns: repeat(4, 1fr);`}\r\n`;\r\n\r\nconst StyledEmptyOrErrorCard = styled(Card)`\r\n    grid-column: 1/-1;\r\n`;\r\n\r\nPeople.propTypes = {\r\n    people: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            PersonId: PropTypes.number.isRequired,\r\n            FirstName: PropTypes.string.isRequired,\r\n            LastName: PropTypes.string.isRequired,\r\n            MiddleName: PropTypes.string,\r\n            DateOfBirth: PropTypes.string,\r\n            Picture: PropTypes.any,\r\n            Interests: PropTypes.string,\r\n            Address: PropTypes.shape({\r\n                PersonAddressId: PropTypes.number.isRequired,\r\n                AddressLine1: PropTypes.string.isRequired,\r\n                AddressLine2: PropTypes.string,\r\n                City: PropTypes.string.isRequired,\r\n                State: PropTypes.string.isRequired,\r\n                ZipCode: PropTypes.string.isRequired,\r\n                Country: PropTypes.string.isRequired\r\n            })\r\n        })\r\n    ),\r\n    isLoading: PropTypes.bool,\r\n    isError: PropTypes.bool,\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport function People(props) {\r\n    return (\r\n        <CardsContainer>\r\n            {!props.isError &&\r\n                props.people.map(person => (\r\n                    <Person\r\n                        isLoading={props.isLoading}\r\n                        key={person.PersonId}\r\n                        person={person}\r\n                        onDelete={() => {\r\n                            props.onDelete();\r\n                        }}\r\n                    />\r\n                ))}\r\n            {props.isError && (\r\n                <StyledEmptyOrErrorCard elevation={Elevation.TWO}>Sorry failed to laod data.</StyledEmptyOrErrorCard>\r\n            )}\r\n            {!props.isError && !props.people.length && (\r\n                <StyledEmptyOrErrorCard elevation={Elevation.TWO}>No matching person found.</StyledEmptyOrErrorCard>\r\n            )}\r\n        </CardsContainer>\r\n    );\r\n}\r\n","/* eslint-disable no-console */\r\n/**\r\n * @module AddPerson\r\n * @description Component to Add person to db\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FileInput, FormGroup, Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { DateInput } from \"@blueprintjs/datetime\";\r\n\r\n/** Internal */\r\nimport { addPerson } from \"../common/data-service\";\r\nimport { toBase64, personModel, requiredAddressKeys, requiredPersonKeys } from \"../common/utils\";\r\nimport { FormText } from \"./\";\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 200px 240px;\r\n    grid-gap: 15px;\r\n`;\r\n\r\nconst jsDateFormatter = {\r\n    formatDate: date => date.toLocaleDateString(),\r\n    parseDate: str => new Date(str),\r\n    placeholder: \"M/D/YYYY\"\r\n};\r\n\r\nAddPerson.propTypes = {\r\n    onAdd: PropTypes.func\r\n};\r\n\r\nexport function AddPerson(props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isValidInput, setIsValidInput] = useState(false);\r\n    const [fileInput, setFileInput] = useState(\"Choose file...\");\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const [person, setPerson] = useState(JSON.parse(JSON.stringify(personModel)));\r\n\r\n    function updatePersonValue(key, val) {\r\n        let newPerson = Object.assign({}, person);\r\n        newPerson[key] = val;\r\n        setPerson(newPerson);\r\n        validate();\r\n    }\r\n\r\n    function updateAddressValue(key, val) {\r\n        let newPerson = Object.assign({}, person);\r\n        newPerson.Address[key] = val;\r\n        setPerson(newPerson);\r\n        validate();\r\n    }\r\n\r\n    function validate() {\r\n        let count = 0;\r\n        requiredPersonKeys.forEach(key => {\r\n            if (!person[key].trim()) {\r\n                count++;\r\n            }\r\n        });\r\n        requiredAddressKeys.forEach(key => {\r\n            if (!person.Address[key].trim()) {\r\n                count++;\r\n            }\r\n        });\r\n        if (count <= 1) setIsValidInput(true);\r\n        else setIsValidInput(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                onClick={() => {\r\n                    setIsOpen(true);\r\n                    setFileInput(\"\");\r\n                    setPerson(JSON.parse(JSON.stringify(personModel)));\r\n                    setIsValidInput(false);\r\n                }}\r\n            >\r\n                Add Person\r\n            </Button>\r\n            <Dialog isOpen={isOpen} icon=\"add\" onClose={() => setIsOpen(false)} title=\"Add Person\">\r\n                <Container className={Classes.DIALOG_BODY}>\r\n                    <FormText\r\n                        placeHolder=\"First Name\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updatePersonValue(\"FirstName\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Last Name\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updatePersonValue(\"LastName\", val)}\r\n                    />\r\n                    <FormGroup helperText=\"\" label=\"Date of birth\" labelFor=\"text-input\" labelInfo=\"(required)\">\r\n                        <DateInput\r\n                            maxDate={new Date()}\r\n                            required\r\n                            {...jsDateFormatter}\r\n                            onChange={newDate => updatePersonValue(\"DateOfBirth\", newDate.toISOString().split(\"T\")[0])}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormText\r\n                        placeHolder=\"Address\"\r\n                        isRequired={true}\r\n                        maxLength={100}\r\n                        onVlaueChanged={val => updateAddressValue(\"AddressLine1\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"City\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"City\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"State\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"State\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Zip Code\"\r\n                        isRequired={true}\r\n                        helperText=\"Should be 5 digit number\"\r\n                        maxLength={5}\r\n                        onVlaueChanged={val => {\r\n                            let parsed = parseInt(val, 10);\r\n                            if (!isNaN(parsed) && parsed > 10000) {\r\n                                updateAddressValue(\"ZipCode\", val);\r\n                            } else {\r\n                                updateAddressValue(\"ZipCode\", \"\");\r\n                            }\r\n                        }}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Country\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"Country\", val)}\r\n                    />\r\n                    <FormGroup\r\n                        helperText=\"Shoud be jpeg and not exceed 1 mb\"\r\n                        label=\"Profile picture\"\r\n                        labelFor=\"text-input\"\r\n                        labelInfo=\"(required)\"\r\n                    >\r\n                        <FileInput\r\n                            disabled={false}\r\n                            required\r\n                            text={fileInput}\r\n                            onInputChange={async ({ target: { files } }) => {\r\n                                const file = files[0];\r\n                                if (file.size < 1024000 && file.type === \"image/jpeg\") {\r\n                                    setFileInput(file.name);\r\n                                    try {\r\n                                        let base64 = await toBase64(file);\r\n                                        base64 = base64.substring(base64.indexOf(\",\") + 1);\r\n                                        updatePersonValue(\"Picture\", base64);\r\n                                    } catch (err) {\r\n                                        console.error(err);\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </FormGroup>\r\n                </Container>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        <Button onClick={() => setIsOpen(false)}>Close</Button>\r\n                        <Button\r\n                            intent={Intent.PRIMARY}\r\n                            onClick={async () => {\r\n                                if (isValidInput) {\r\n                                    setIsSaving(true);\r\n                                    try {\r\n                                        await addPerson(person);\r\n                                    } catch (ex) {\r\n                                        // eslint-disable-next-line no-console\r\n                                        console.error(ex);\r\n                                        setIsSaving(false);\r\n                                    }\r\n\r\n                                    props.onAdd();\r\n                                    setIsSaving(false);\r\n                                    setIsOpen(false);\r\n                                }\r\n                            }}\r\n                            disabled={!isValidInput}\r\n                            loading={isSaving}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * @module Person\r\n * @description Component to show person's profile as card\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { debounce } from \"throttle-debounce\";\r\n\r\nSearch.propTypes = {\r\n    onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport function Search(props) {\r\n    /** function to limit calls to server*/\r\n    const debouncedSearch = debounce(300, (val) => {\r\n        props.onSearch(val);\r\n    });\r\n\r\n    return (\r\n        <div className=\"bp3-input-group\">\r\n            <span className=\"bp3-icon bp3-icon-search\"></span>\r\n            <input\r\n                type=\"text\"\r\n                onChange={event => {\r\n                    if (props.onSearch && typeof props.onSearch === \"function\") {\r\n                        debouncedSearch(event.target.value);\r\n                    }\r\n                }}\r\n                className=\"bp3-input\"\r\n                placeholder=\"Search for people\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * @module FormText\r\n * @description Component to capture text input\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\r\n\r\nFormText.propTypes = {\r\n    maxLength: PropTypes.number.isRequired,\r\n    placeHolder: PropTypes.string,\r\n    isRequired: PropTypes.bool,\r\n    helperText: PropTypes.string,\r\n    onVlaueChanged: PropTypes.func\r\n};\r\nexport function FormText(props) {\r\n    const requiredLabel = props.isRequired ? \"(required)\" : \"\";\r\n    return (\r\n        <FormGroup\r\n            helperText={props.helperText}\r\n            label={props.placeHolder}\r\n            labelFor=\"text-input\"\r\n            labelInfo={requiredLabel}\r\n        >\r\n            <InputGroup\r\n                required\r\n                maxLength={props.maxLength}\r\n                id=\"text-input\"\r\n                placeholder={props.placeHolder}\r\n                onChange={({ target: { value } }) => {\r\n                    props.onVlaueChanged(value);\r\n                }}\r\n            />\r\n        </FormGroup>\r\n    );\r\n}\r\n","/**\n * @module App\n * @description App component\n */\n\n/** External javascript  packages */\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n/** External CSS  packages */\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\n\n/** Internal */\nimport { GlobalStyle } from \"./styles/global\";\nimport { colorPalette } from \"./themes/color-palette\";\nimport { People, AddPerson, Search } from \"./components\";\nimport { search } from \"./common/data-service\";\n// Data to show skeleton loading\nimport skeleton from \"./common/skeleton-data\";\n\nconst AppContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    margin-left: 20px;\n    margin-right: 20px;\n`;\n\nconst Header = styled.header`\n    background-color: ${colorPalette.bluish};\n    color: ${colorPalette.wildsand};\n    margin-left: -20px;\n    margin-right: -20px;\n    height: 40px;\n\n    padding: 5px;\n    padding-left: 20px;\n    font-size: 1.5rem;\n`;\n\nconst SearchAddContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 40px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n`;\n\nfunction App() {\n    /** React hooks for managing state of app */\n    const [people, setPeople] = useState([...skeleton]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    function getData(input) {\n        search(input)\n            .then(response => {\n                setPeople([...response.data]);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                //eslint-disable-next-line no-console\n                console.error(err);\n                setIsError(true);\n            });\n    }\n\n    /** Adding one second delay to mock search being slow */\n    function getDataWithDelay(searchInput) {\n        setIsLoading(true);\n        setPeople([...skeleton]);\n        setTimeout(() => {\n            getData(searchInput);\n        }, 1000);\n    }\n\n    useEffect(() => {\n        // Laod all people first time\n        getData();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <GlobalStyle />\n            <AppContainer>\n                <Header>Person search app</Header>\n                <SearchAddContainer>\n                    <Search onSearch={val => getDataWithDelay(val)} />\n                    <AddPerson onAdd={() => getData()} />\n                </SearchAddContainer>\n                <People\n                    isError={isError}\n                    isLoading={isLoading}\n                    people={people}\n                    onDelete={() => {\n                        getData();\n                    }}\n                ></People>\n            </AppContainer>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}