{"version":3,"sources":["styles/global.js","themes/color-palette.js","common/utils.js","components/person.js","styles/media.js","components/people.js","common/data-service.js","components/add-person.js","components/search.js","components/form-text.js","app.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","styledNormalize","colorPalette","alto","white","black10","black14","black12","black20","bluish","silver","mineshaft","wildsand","Object","freeze","formatData","data","format","today","Date","date","isNaN","Intl","DateTimeFormat","age","getFullYear","m","getMonth","getDate","concat","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","personModel","FirstName","LastName","MiddleName","DateOfBirth","Picture","Interests","Address","AddressLine1","AddressLine2","City","State","ZipCode","Country","requiredPersonKeys","requiredAddressKeys","StyledCard","styled","Card","person_templateObject","StyledTag","Tag","_templateObject2","StyledText","Text","_templateObject3","Image","img","_templateObject4","div","_templateObject5","Person","props","formattedName","person","interests","JSON","parse","imgSrc","skeletonLoad","isLoading","formattedDobAge","react_default","a","createElement","elevation","Elevation","TWO","src","width","alt","className","map","interest","index","key","PersonId","round","large","sizes","xsmall","small","medium","media","keys","reduce","acc","label","css","media_templateObject","apply","arguments","CardsContainer","people_templateObject","people_templateObject2","people_templateObject3","people_templateObject4","StyledEmptyOrErrorCard","people_templateObject5","People","isError","people","length","_callee","input","url","regenerator_default","wrap","_context","prev","next","window","location","origin","trim","axios","get","abrupt","sent","stop","addPerson","_x2","_addPerson","this","_callee2","_context2","post","Container","add_person_templateObject","jsDateFormatter","formatDate","toLocaleDateString","parseDate","str","placeholder","AddPerson","_useState","useState","_useState2","slicedToArray","isOpen","setIsOpen","_useState3","_useState4","isValidInput","setIsValidInput","_useState5","_useState6","fileInput","setFileInput","_useState7","_useState8","isSaving","setIsSaving","_useState9","assign","_useState10","setPerson","updatePersonValue","val","newPerson","validate","updateAddressValue","forEach","buttons","onClick","dialog","icon","onClose","title","Classes","DIALOG_BODY","FormText","placeHolder","isRequired","maxLength","onVlaueChanged","formGroup","helperText","labelFor","labelInfo","dateInput","maxDate","required","onChange","newDate","toISOString","split","parsed","parseInt","forms_fileInput","disabled","text","onInputChange","_ref2","asyncToGenerator","mark","_ref","files","base64","target","size","type","name","substring","indexOf","t0","console","_x","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","intent","Intent","PRIMARY","onAdd","loading","Search","debouncedSearch","debounce","onSearch","event","value","requiredLabel","inputGroup","id","AppContainer","app_templateObject","Header","header","app_templateObject2","SearchAddContainer","app_templateObject3","App","toConsumableArray","skeleton","setPeople","setIsLoading","setIsError","getData","_search","search","then","response","catch","err","useEffect","Fragment","searchInput","setTimeout","Boolean","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.497c0eea.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport styledNormalize from \"styled-normalize\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css?family=Lato');\r\n    ${styledNormalize}\r\n    :root{\r\n        font-size: 16px;\r\n        font-family: Lato;\r\n    }\r\n\r\n`;\r\n","const colorPalette = {\r\n    alto: \"#CFCFCF\",\r\n    white: \"#ffffff\",\r\n    black10: \"rgba(0, 0, 0, 0.1)\",\r\n    black14: \"rgba(0, 0, 0, 0.14)\",\r\n    black12: \"rgba(0, 0, 0, 0.12)\",\r\n    black20: \"rgba(0, 0, 0, 0.2)\",\r\n    bluish: \"#2892bd\",\r\n    silver: \"#868686\",\r\n    mineshaft: \"#3D3D3D\",\r\n    wildsand: \"#f5f5f5\"\r\n};\r\n\r\nObject.freeze(colorPalette);\r\nexport { colorPalette };\r\n","/**\r\n * Format 'data' in specified 'format'\r\n * @param {string} data\r\n * @param {string}  format\r\n * return {string} format applied data\r\n */\r\nexport function formatData(data, format) {\r\n    var today = new Date();\r\n    const date = new Date(data);\r\n    switch (format) {\r\n        case \"date\":\r\n            if (date instanceof Date && !isNaN(date)) data = Intl.DateTimeFormat().format(date);\r\n            break;\r\n        case \"age\":\r\n            var age = today.getFullYear() - date.getFullYear();\r\n            var m = today.getMonth() - date.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < date.getDate())) {\r\n                age--;\r\n            }\r\n            data = `${age} y`;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function toBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nexport const personModel = {\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    MiddleName: \"\",\r\n    DateOfBirth: \"\",\r\n    Picture: \"\",\r\n    Interests: \"\",\r\n    Address: {\r\n        AddressLine1: \"\",\r\n        AddressLine2: \"\",\r\n        City: \"\",\r\n        State: \"\",\r\n        ZipCode: \"\",\r\n        Country: \"\"\r\n    }\r\n};\r\n\r\nexport const requiredPersonKeys = [\"FirstName\", \"LastName\", \"DateOfBirth\", \"Picture\"];\r\nexport const requiredAddressKeys = [\"AddressLine1\", \"City\", \"State\", \"ZipCode\", \"Country\"];\r\n","/**\r\n * @module Person\r\n * @description Component to show person's profile as card\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tag, Text, Card, Elevation } from \"@blueprintjs/core\";\r\n\r\n/** Internal */\r\nimport { formatData } from \"../common/utils\";\r\n\r\nconst StyledCard = styled(Card)`\r\n    display: grid;\r\n    grid-template-columns: [image]auto [details]1fr;\r\n    grid-template-rows: 1fr auto;\r\n    justify-content: left;\r\n    align-content: center;\r\n    grid-gap: 10px;\r\n    min-width: 300px;\r\n`;\r\n\r\nconst StyledTag = styled(Tag)`\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n    padding: 2px;\r\n`;\r\n\r\nconst StyledText = styled(Text)`\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    min-width: 100px;\r\n`;\r\n\r\nconst Interests = styled.div`\r\n    grid-column: 1/-1;\r\n`;\r\n\r\nPerson.propTypes = {\r\n    person: PropTypes.shape({\r\n        PersonId: PropTypes.number.isRequired,\r\n        FirstName: PropTypes.string.isRequired,\r\n        LastName: PropTypes.string.isRequired,\r\n        MiddleName: PropTypes.string,\r\n        DateOfBirth: PropTypes.string,\r\n        Picture: PropTypes.any,\r\n        Interests: PropTypes.string,\r\n        Address: PropTypes.shape({\r\n            PersonAddressId: PropTypes.number.isRequired,\r\n            AddressLine1: PropTypes.string.isRequired,\r\n            AddressLine2: PropTypes.string,\r\n            City: PropTypes.string.isRequired,\r\n            State: PropTypes.string.isRequired,\r\n            ZipCode: PropTypes.string.isRequired,\r\n            Country: PropTypes.string.isRequired\r\n        })\r\n    }),\r\n    isLoading: PropTypes.bool\r\n};\r\nexport function Person(props) {\r\n    const formattedName = props.person.LastName + \", \" + props.person.FirstName;\r\n    const interests = props.person.Interests ? JSON.parse(props.person.Interests) : [];\r\n    const imgSrc = \"data:image/jpeg;base64,\" + props.person.Picture;\r\n    const skeletonLoad = props.isLoading ? \"bp3-skeleton\" : \"\";\r\n    const formattedDobAge =\r\n        formatData(props.person.DateOfBirth, \"date\") + \" (\" + formatData(props.person.DateOfBirth, \"age\") + \")\";\r\n\r\n    return (\r\n        <StyledCard elevation={Elevation.TWO}>\r\n            {!props.isLoading && <Image src={imgSrc} width=\"150px\" alt=\"\"></Image>}\r\n            {props.isLoading && <Image className={skeletonLoad} src=\"\" width=\"150px\" alt=\"\"></Image>}\r\n            <div>\r\n                <StyledText className={skeletonLoad}>{formattedName}</StyledText>\r\n                <StyledText className={skeletonLoad}>{formattedDobAge}</StyledText>\r\n                <StyledText className={skeletonLoad}>{props.person.Address.AddressLine1}</StyledText>\r\n                <StyledText className={skeletonLoad}>\r\n                    {props.person.Address.City +\r\n                        \", \" +\r\n                        props.person.Address.State +\r\n                        \", \" +\r\n                        props.person.Address.ZipCode}\r\n                </StyledText>\r\n                <StyledText className={skeletonLoad}>{props.person.Address.Country}</StyledText>\r\n            </div>\r\n            <Interests>\r\n                {interests.map((interest, index) => (\r\n                    <StyledTag className={skeletonLoad} key={props.person.PersonId + index} round={true} large={false}>\r\n                        {interest}\r\n                    </StyledTag>\r\n                ))}\r\n            </Interests>\r\n        </StyledCard>\r\n    );\r\n}\r\n","import { css } from \"styled-components\";\r\nconst sizes = {\r\n    xsmall: 360,\r\n    small: 768,\r\n    medium: 992,\r\n    large: 1440\r\n};\r\n\r\n// Iterate through the sizes and create a media template\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n    acc[label] = (...args) => css`\r\n        @media (min-width: ${sizes[label] / 16}em) {\r\n            ${css(...args)}\r\n        }\r\n    `;\r\n\r\n    return acc;\r\n}, {});\r\n\r\nexport { media };\r\n","/**\r\n * @module People\r\n * @description Component to show collection of Person profile cards\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Elevation } from \"@blueprintjs/core\";\r\n\r\n/** Internal */\r\nimport { Person } from \"./\";\r\nimport { media } from \"../styles/media\";\r\n\r\nconst CardsContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(1, 1fr);\r\n    grid-gap: 20px;\r\n    /* Adjust cards in one row based on screen break point. Defaulted to xsmal */\r\n    ${media.small`grid-template-columns: repeat(2, 1fr);`}\r\n    ${media.medium`grid-template-columns: repeat(3, 1fr);`}\r\n    ${media.large`grid-template-columns: repeat(4, 1fr);`}\r\n`;\r\n\r\nconst StyledEmptyOrErrorCard = styled(Card)`\r\n    grid-column: 1/-1;\r\n`;\r\n\r\nPeople.propTypes = {\r\n    people: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            PersonId: PropTypes.number.isRequired,\r\n            FirstName: PropTypes.string.isRequired,\r\n            LastName: PropTypes.string.isRequired,\r\n            MiddleName: PropTypes.string,\r\n            DateOfBirth: PropTypes.string,\r\n            Picture: PropTypes.any,\r\n            Interests: PropTypes.string,\r\n            Address: PropTypes.shape({\r\n                PersonAddressId: PropTypes.number.isRequired,\r\n                AddressLine1: PropTypes.string.isRequired,\r\n                AddressLine2: PropTypes.string,\r\n                City: PropTypes.string.isRequired,\r\n                State: PropTypes.string.isRequired,\r\n                ZipCode: PropTypes.string.isRequired,\r\n                Country: PropTypes.string.isRequired\r\n            })\r\n        })\r\n    ),\r\n    isLoading: PropTypes.bool,\r\n    isError: PropTypes.bool\r\n};\r\n\r\nexport function People(props) {\r\n    return (\r\n        <CardsContainer>\r\n            {!props.isError &&\r\n                props.people.map(person => (\r\n                    <Person isLoading={props.isLoading} key={person.PersonId} person={person} />\r\n                ))}\r\n            {props.isError && (\r\n                <StyledEmptyOrErrorCard elevation={Elevation.TWO}>Sorry failed to laod data.</StyledEmptyOrErrorCard>\r\n            )}\r\n            {!props.isError && !props.people.length && (\r\n                <StyledEmptyOrErrorCard elevation={Elevation.TWO}>No matching person found.</StyledEmptyOrErrorCard>\r\n            )}\r\n        </CardsContainer>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport async function search(input) {\r\n    let url = window.location.origin + \"/api/people/\";\r\n    if (input && input.trim()) {\r\n        url += \"search/\" + input;\r\n    }\r\n    return await axios.get(url);\r\n}\r\n\r\nexport async function addPerson(person) {\r\n    let url = window.location.origin + \"/api/people/\";\r\n    return await axios.post(url, person);\r\n}\r\n","/* eslint-disable no-console */\r\n/**\r\n * @module AddPerson\r\n * @description Component to Add person to db\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FileInput, FormGroup, Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { DateInput } from \"@blueprintjs/datetime\";\r\n\r\n/** Internal */\r\nimport { addPerson } from \"../common/data-service\";\r\nimport { toBase64, personModel, requiredAddressKeys, requiredPersonKeys } from \"../common/utils\";\r\nimport { FormText } from \"./\";\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 200px 240px;\r\n    grid-gap: 15px;\r\n`;\r\n\r\nconst jsDateFormatter = {\r\n    formatDate: date => date.toLocaleDateString(),\r\n    parseDate: str => new Date(str),\r\n    placeholder: \"M/D/YYYY\"\r\n};\r\n\r\nAddPerson.propTypes = {\r\n    onAdd: PropTypes.func\r\n};\r\n\r\nexport function AddPerson(props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isValidInput, setIsValidInput] = useState(false);\r\n    const [fileInput, setFileInput] = useState(\"Choose file...\");\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const [person, setPerson] = useState(Object.assign({}, personModel));\r\n\r\n    function updatePersonValue(key, val) {\r\n        let newPerson = Object.assign({}, person);\r\n        newPerson[key] = val;\r\n        setPerson(newPerson);\r\n        validate();\r\n    }\r\n\r\n    function updateAddressValue(key, val) {\r\n        let newPerson = Object.assign({}, person);\r\n        newPerson.Address[key] = val;\r\n        setPerson(newPerson);\r\n        validate();\r\n    }\r\n\r\n    function validate() {\r\n        requiredPersonKeys.forEach(key => {\r\n            if (!person[key]) return;\r\n        });\r\n        requiredAddressKeys.forEach(key => {\r\n            if (!person.Address[key]) return;\r\n        });\r\n\r\n        setIsValidInput(true);\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                onClick={() => {\r\n                    setIsOpen(true);\r\n                    setFileInput(\"\");\r\n                    setPerson(Object.assign({}, personModel));\r\n                }}\r\n            >\r\n                Add Person\r\n            </Button>\r\n            <Dialog isOpen={isOpen} icon=\"add\" onClose={() => setIsOpen(false)} title=\"Add Person\">\r\n                <Container className={Classes.DIALOG_BODY}>\r\n                    <FormText\r\n                        placeHolder=\"First Name\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updatePersonValue(\"FirstName\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Last Name\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updatePersonValue(\"LastName\", val)}\r\n                    />\r\n                    <FormGroup helperText=\"\" label=\"Date of birth\" labelFor=\"text-input\" labelInfo=\"(required)\">\r\n                        <DateInput\r\n                            maxDate={new Date()}\r\n                            required\r\n                            {...jsDateFormatter}\r\n                            onChange={newDate => updatePersonValue(\"DateOfBirth\", newDate.toISOString().split(\"T\")[0])}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormText\r\n                        placeHolder=\"Address\"\r\n                        isRequired={true}\r\n                        maxLength={100}\r\n                        onVlaueChanged={val => updateAddressValue(\"AddressLine1\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"City\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"City\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"State\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"State\", val)}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Zip Code\"\r\n                        isRequired={true}\r\n                        maxLength={5}\r\n                        onVlaueChanged={val => {\r\n                            let parsed = parseInt(val, 10);\r\n                            if (!isNaN(parsed) && parsed > 10000) {\r\n                                updateAddressValue(\"ZipCode\", val);\r\n                            }\r\n                        }}\r\n                    />\r\n                    <FormText\r\n                        placeHolder=\"Country\"\r\n                        isRequired={true}\r\n                        maxLength={50}\r\n                        onVlaueChanged={val => updateAddressValue(\"Country\", val)}\r\n                    />\r\n                    <FormGroup\r\n                        helperText=\"Shoud be jpeg and not exceed 1 mb\"\r\n                        label=\"Profile picture\"\r\n                        labelFor=\"text-input\"\r\n                        labelInfo=\"(required)\"\r\n                    >\r\n                        <FileInput\r\n                            disabled={false}\r\n                            required\r\n                            text={fileInput}\r\n                            onInputChange={async ({ target: { files } }) => {\r\n                                const file = files[0];\r\n                                if (file.size < 1024000 && file.type === \"image/jpeg\") {\r\n                                    setFileInput(file.name);\r\n                                    try {\r\n                                        let base64 = await toBase64(file);\r\n                                        base64 = base64.substring(base64.indexOf(\",\") + 1);\r\n                                        updatePersonValue(\"Picture\", base64);\r\n                                    } catch (err) {\r\n                                        console.error(err);\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </FormGroup>\r\n                </Container>\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        <Button onClick={() => setIsOpen(false)}>Close</Button>\r\n                        <Button\r\n                            intent={Intent.PRIMARY}\r\n                            onClick={async () => {\r\n                                if (isValidInput) {\r\n                                    setIsSaving(true);\r\n                                    try {\r\n                                        await addPerson(person);\r\n                                    } catch (ex) {\r\n                                        // eslint-disable-next-line no-console\r\n                                        console.error(ex);\r\n                                        setIsSaving(false);\r\n                                    }\r\n\r\n                                    props.onAdd();\r\n                                    setIsSaving(false);\r\n                                    setIsOpen(false);\r\n                                }\r\n                            }}\r\n                            disabled={!isValidInput}\r\n                            loading={isSaving}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * @module Person\r\n * @description Component to show person's profile as card\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { debounce } from \"throttle-debounce\";\r\n\r\nSearch.propTypes = {\r\n    onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport function Search(props) {\r\n    /** function to limit calls to server*/\r\n    const debouncedSearch = debounce(300, (val) => {\r\n        props.onSearch(val);\r\n    });\r\n\r\n    return (\r\n        <div className=\"bp3-input-group\">\r\n            <span className=\"bp3-icon bp3-icon-search\"></span>\r\n            <input\r\n                type=\"text\"\r\n                onChange={event => {\r\n                    if (props.onSearch && typeof props.onSearch === \"function\") {\r\n                        debouncedSearch(event.target.value);\r\n                    }\r\n                }}\r\n                className=\"bp3-input\"\r\n                placeholder=\"Search for people\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * @module FormText\r\n * @description Component to capture text input\r\n */\r\n\r\n/** External javascript  packages */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\r\n\r\nFormText.propTypes = {\r\n    maxLength: PropTypes.number.isRequired,\r\n    placeHolder: PropTypes.string,\r\n    isRequired: PropTypes.bool,\r\n    helperText: PropTypes.string,\r\n    onVlaueChanged: PropTypes.func\r\n};\r\nexport function FormText(props) {\r\n    const requiredLabel = props.isRequired ? \"(required)\" : \"\";\r\n    return (\r\n        <FormGroup\r\n            helperText={props.helperText}\r\n            label={props.placeHolder}\r\n            labelFor=\"text-input\"\r\n            labelInfo={requiredLabel}\r\n        >\r\n            <InputGroup\r\n                required\r\n                maxLength={props.maxLength}\r\n                id=\"text-input\"\r\n                placeholder={props.placeHolder}\r\n                onChange={({ target: { value } }) => {\r\n                    props.onVlaueChanged(value);\r\n                }}\r\n            />\r\n        </FormGroup>\r\n    );\r\n}\r\n","/**\n * @module App\n * @description App component\n */\n\n/** External javascript  packages */\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n/** External CSS  packages */\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\n\n/** Internal */\nimport { GlobalStyle } from \"./styles/global\";\nimport { colorPalette } from \"./themes/color-palette\";\nimport { People, AddPerson, Search } from \"./components\";\nimport { search } from \"./common/data-service\";\n// Data to show skeleton loading\nimport skeleton from \"./common/skeleton-data\";\n\nconst AppContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    margin-left: 20px;\n    margin-right: 20px;\n`;\n\nconst Header = styled.header`\n    background-color: ${colorPalette.bluish};\n    color: ${colorPalette.wildsand};\n    margin-left: -20px;\n    margin-right: -20px;\n    height: 40px;\n    \n    padding: 5px;\n    padding-left: 20px;\n    font-size: 1.5rem;\n`;\n\nconst SearchAddContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 40px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n`;\n\nfunction App() {\n    /** React hooks for managing state of app */\n    const [people, setPeople] = useState([...skeleton]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    function getData(input) {\n        search(input)\n            .then(response => {\n                setPeople([...response.data]);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                //eslint-disable-next-line no-console\n                console.error(err);\n                setIsError(true);\n            });\n    }\n\n    /** Adding one second delay to mock search being slow */\n    function getDataWithDelay(searchInput) {\n        setIsLoading(true);\n        setPeople([...skeleton]);\n        setTimeout(() => {\n            getData(searchInput);\n        }, 1000);\n    }\n\n    useEffect(() => {\n        // Laod all people first time\n        getData();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <GlobalStyle />\n            <AppContainer>\n                <Header>Person search app</Header>\n                <SearchAddContainer>\n                    <Search onSearch={val => getDataWithDelay(val)} />\n                    <AddPerson onAdd={() => getData()} />\n                </SearchAddContainer>\n                <People isError={isError} isLoading={isLoading} people={people}></People>\n            </AppContainer>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}